generator client {
  provider   = "prisma-client-js"
  engineType = "library" // <-- Node-API, evita el binario .dll “query_engine-windows.dll.node”
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
}

/**
 * =========================
 * Enums
 * =========================
 */
enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  LOST
  WON
}

enum LeadSource {
  UNKNOWN
  WEBSITE
  REFERRAL
  GOOGLE
  FACEBOOK
  YELP
  TRIPADVISOR
  OTHER
}

enum LocationType {
  HQ
  BRANCH
  FRANCHISE
}

enum Sentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
  MIXED
}

enum JobType {
  GENERATE_RESPONSE
  PUBLISH_RESPONSE
  SYNC_REVIEWS
  SYNC_LOCATIONS
  RECOMPUTE_KPI
}

enum JobStatus {
  QUEUED
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
}

enum LocationRole {
  MANAGER
  STAFF
  VIEWER
}


enum LocationStatus {
  ACTIVE
  INACTIVE
  DRAFT
  PENDING_VERIFICATION
}

enum Role {
  system_admin
  org_admin
  user
  test
}

enum ReviewProvider {
  GOOGLE
}

enum ResponseStatus {
  PENDING
  APPROVED
  PUBLISHED
  REJECTED
  DISABLED
}

enum ResponseSource {
  AI
  HUMAN
}

enum UserStatusEventType {
  CREATED
  ACTIVATED
  SUSPENDED
  REACTIVATED
  DEACTIVATED
}

/**
 * =========================
 * Core Auth
 * =========================
 */
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(user)

  // ---- Campos de negocio / estado
  isActive          Boolean   @default(true) // activo en la plataforma
  isSuspended       Boolean   @default(false) // suspendido (no puede acceder)
  suspendedAt       DateTime?
  suspendedReason   String?
  deactivatedAt     DateTime? // baja voluntaria o soft-delete
  lastLoginAt       DateTime?
  lastSeenAt        DateTime? // última actividad
  loginCount        Int       @default(0)
  failedLoginCount  Int       @default(0)
  locale            String?   @default("es-ES")
  timezone          String?   @default("Europe/Madrid")
  phone             String?
  marketingOptIn    Boolean   @default(false)
  termsAcceptedAt   DateTime?
  privacyAcceptedAt DateTime?
  notes             String? // notas internas
  

  // Relaciones
  Account            Account[]
  ExternalConnection ExternalConnection[]
  responsesCreated   Response[]           @relation("ResponseCreatedBy")
  responsesEdited    Response[]           @relation("ResponseEditedBy")
  Session            Session[]
  UserCompany        UserCompany[]
  UserLogin          UserLogin[] // auditoría de logins
  UserStatusEvent    UserStatusEvent[] // histórico de estado
  UserLocation       UserLocation[]
  passwordHash       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([role])
  @@index([isActive, isSuspended])
  @@index([lastLoginAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * =========================
 * Auditoría y eventos
 * =========================
 */

// Cada intento de login exitoso/erróneo
model UserLogin {
  id        String   @id @default(cuid())
  userId    String?
  provider  String?
  success   Boolean  @default(false)
  ip        String?
  userAgent String?
  error     String?
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
}

// Histórico de cambios de estado (suspensiones, reactivaciones, etc.)
model UserStatusEvent {
  id        String              @id @default(cuid())
  userId    String
  type      UserStatusEventType
  reason    String?
  createdAt DateTime            @default(now())
  User      User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

/**
 * =========================
 * Negocio
 * =========================
 */

model ExternalConnection {
  id             String     @id @default(cuid())
  userId         String
  provider       String
  providerUserId String? // id en el proveedor
  accountName    String?
  accountEmail   String?
  scope          String?
  access_token   String
  refresh_token  String?
  expires_at     Int?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  companyId      String?
  User           User       @relation(fields: [userId], references: [id])
  Location       Location[]

  @@unique([userId, provider])
  @@index([companyId])
}

model Company {
  id            String   @id @default(cuid())
  name          String
  createdById   String
  createdAt     DateTime @default(now())
  activity      String?  @db.VarChar(64)
  cif           String?  @db.VarChar(32)
  employeesBand String?  @db.VarChar(32)
  logoUrl       String?
  address       String?
  brandColor    String?  @db.VarChar(16)
  city          String?
  country       String?
  countryCode   String?  @db.VarChar(2)
  description   String?
  email         String?
  phone         String?
  website       String?

  // Métricas y estado
  reviewsAvg       Decimal?           @db.Decimal(3, 2)
  reviewsCount     Int                @default(0)
  lastSyncAt       DateTime?
  updatedAt        DateTime           @default(now()) @updatedAt
  LocationKpiDaily LocationKpiDaily[] @relation("CompanyToKpiDaily")
  jobs Job[]     // ← NUEVO: inversa de Job.company


  // Facturación (básico)
  plan                 String?   @default("free")
  planRenewsAt         DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?

  // Redes
  facebookUrl  String?
  instagramUrl String?
  linkedinUrl  String?
  twitterUrl   String?
  matrix       String? @db.VarChar(128)
  registryId   String? @db.VarChar(64)
  region       String?
  postalCode   String?
  vatNumber    String? @db.VarChar(32)

  Lead             Lead[]
  Location         Location[]
  Reviews          Review[]          @relation("CompanyReviews")
  UserCompany      UserCompany[]
  responseSettings ResponseSettings?

  @@index([name])
  @@index([activity])
  @@index([matrix])
}

model UserCompany {
  id        String      @id @default(cuid())
  userId    String
  companyId String
  role      CompanyRole @default(MEMBER)
  createdAt DateTime    @default(now())

  Company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  User      User        @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@unique([userId, companyId])   // ← NUEVO: evita duplicados de pares user-company
  @@index([userId])
  @@index([companyId])
}


model Lead {
  id        String     @id @default(cuid())
  companyId String
  ownerId   String?
  name      String
  email     String?
  phone     String?
  source    LeadSource @default(UNKNOWN)
  status    LeadStatus @default(NEW)
  notes     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  company   Company    @relation(fields: [companyId], references: [id])

  @@index([companyId])
  @@index([ownerId])
  @@index([status])
}

model Location {
  id                   String          @id @default(cuid())
  companyId            String
  title                String
  address              String?
  city                 String?
  region               String?
  country              String?
  postalCode           String?
  phone                String?
  website              String?
  googleName           String?
  googlePlaceId        String?         @unique
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @default(now()) @updatedAt
  address2             String?
  countryCode          String?         @db.VarChar(2)
  email                String?
  externalConnectionId String?
  facebookUrl          String?
  featuredImageUrl     String?
  googleAccountId      String?
  googleLocationId     String?
  instagramUrl         String?
  lastSyncAt           DateTime?
  latitude             Decimal?        @db.Decimal(10, 7)
  longitude            Decimal?        @db.Decimal(10, 7)
  openingHours         Json?
  reviewsAvg           Decimal?        @db.Decimal(3, 2)
  reviewsCount         Int             @default(0)
  slug                 String?         @unique
  status               LocationStatus? @default(DRAFT)
  timezone             String?
  isFeatured           Boolean         @default(false)

  // 🎯 NUEVO: relación Actividad → Tipo
  activityId           String?
  typeId               String?

  activity             Activity?       @relation(fields: [activityId], references: [id])
  type                 Type?           @relation(fields: [typeId], references: [id])

  company            Company             @relation(fields: [companyId], references: [id])
  ExternalConnection ExternalConnection? @relation(fields: [externalConnectionId], references: [id])
  Reviews            Review[]            @relation("LocationReviews")
  KpiDaily           LocationKpiDaily[]  @relation("LocationToKpiDaily")
  UserLocation       UserLocation[]
  jobs Job[]   // inversa de Job.location


  @@index([companyId])
  @@index([googleAccountId])
  @@index([status])
  @@index([activityId])
  @@index([typeId])
}

model UserLocation {
  id         String       @id @default(cuid())
  userId     String
  locationId String
  role       LocationRole @default(VIEWER)
  createdAt  DateTime     @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([userId, locationId])
  @@index([locationId])
}

model Review {
  id              String         @id @default(cuid())
  companyId       String
  locationId      String
  provider        ReviewProvider
  externalId      String
  reviewerName    String?
  reviewerPhoto   String?
  reviewerAnon    Boolean?
  rating          Int
  comment         String?
  languageCode    String?        @db.VarChar(8)
  createdAtG      DateTime?
  updatedAtG      DateTime?
  replyComment    String?
  replyUpdatedAtG DateTime?
  ingestedAt      DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt
  responses       Response[]
  Company         Company        @relation("CompanyReviews", fields: [companyId], references: [id], onDelete: Cascade)
  Location        Location       @relation("LocationReviews", fields: [locationId], references: [id], onDelete: Cascade)
  analysis  ReviewAnalysis?   // ← NUEVO: inversa 1:1 de ReviewAnalysis.review
  jobs      Job[]             // ← NUEVO: inversa de Job.review


  @@unique([provider, externalId])
  @@index([companyId])
  @@index([locationId])
  @@index([rating])
  @@index([createdAtG])
}

model Response {
  id              String         @id @default(cuid())
  reviewId        String
  content         String
  status          ResponseStatus @default(PENDING)
  active          Boolean        @default(true)
  published       Boolean        @default(false)
  edited          Boolean        @default(false)
  generationCount Int            @default(1)
  lastGeneratedAt DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  publishedAt     DateTime?
  createdById     String?
  editedById      String?
  source          ResponseSource @default(AI)
  model           String?
  temperature     Float?
  promptVersion   String?
  language        String?
  tone            String?
  businessType    String?
  moderationFlag  Boolean        @default(false)
  moderationNotes String?
  lastError       String?
  createdBy       User?          @relation("ResponseCreatedBy", fields: [createdById], references: [id])
  editedBy        User?          @relation("ResponseEditedBy", fields: [editedById], references: [id])
  review          Review         @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  publishLogs ResponsePublishLog[]  // ← NUEVO: inversa de ResponsePublishLog.response
  jobs        Job[]                 // ← NUEVO: inversa de Job.response


  @@index([reviewId])
  @@index([status, published, active])
}

model LocationKpiDaily {
  id           String   @id @default(cuid())
  companyId    String
  locationId   String
  snapshotDate DateTime

  // Métricas base
  totalReviews    Int
  newReviews7d    Int
  newReviews30d   Int
  unansweredCount Int
  answeredRate    Int
  avgAll          Decimal? @db.Decimal(3, 2)
  avg30d          Decimal? @db.Decimal(3, 2)
  prev30dAvg      Decimal? @db.Decimal(3, 2)
  responses7d     Int
  responseAvgSec  Int?
  lastComputedAt  DateTime @default(now())

  // Relaciones explícitas + nombres (para evitar ambigüedades)
  company  Company  @relation(name: "CompanyToKpiDaily", fields: [companyId], references: [id], onDelete: Cascade)
  location Location @relation(name: "LocationToKpiDaily", fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([locationId, snapshotDate])
  @@index([companyId, snapshotDate])
  @@index([snapshotDate])
}

model ResponseSettings {
  id        String  @id @default(cuid())
  companyId String  @unique
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  config Json

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdByUserId String?
  updatedByUserId String?

  @@index([updatedAt])
}

model Activity {
  id        String     @id @default(cuid())
  name      String     @unique

  // Relaciones
  types     Type[]
  locations Location[]   // ← inversa de Location.activity

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Type {
  id          String     @id @default(cuid())
  name        String
  activityId  String
  activity    Activity   @relation(fields: [activityId], references: [id])

  // Relaciones
  locations   Location[]   // ← inversa de Location.type

  @@unique([activityId, name])
  @@index([activityId])

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// Análisis de reviews para tendencias, palabras clave y sentimiento
model ReviewAnalysis {
  id          String     @id @default(cuid())
  reviewId    String     @unique
  language    String?    @db.VarChar(8)
  sentiment   Sentiment?
  summary     String?
  keyPhrases  String[]   // PG: text[]
  categories  String[]   // PG: text[] (ej. ["servicio","precio"])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  review      Review     @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([sentiment])
  @@index([createdAt])
}

// Auditoría de publicación de respuestas a proveedores (Google, etc.)
model ResponsePublishLog {
  id            String         @id @default(cuid())
  responseId    String
  provider      ReviewProvider
  publishedAt   DateTime?
  externalMsgId String?
  payload       Json?
  error         String?
  createdAt     DateTime       @default(now())

  response      Response       @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@index([responseId, createdAt])
  @@index([provider, createdAt])
}

// Cola de trabajos (generación, publicación, sync, KPIs…)
model Job {
  id          String     @id @default(cuid())
  type        JobType
  status      JobStatus  @default(QUEUED)
  payload     Json?
  attempts    Int        @default(0)
  lastError   String?
  scheduledAt DateTime?
  startedAt   DateTime?
  finishedAt  DateTime?
  companyId   String?
  locationId  String?
  reviewId    String?
  responseId  String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  company   Company?  @relation(fields: [companyId], references: [id], onDelete: SetNull)
  location  Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  review    Review?   @relation(fields: [reviewId], references: [id], onDelete: SetNull)
  response  Response? @relation(fields: [responseId], references: [id], onDelete: SetNull)

  @@index([status, type, scheduledAt])
  @@index([companyId])
  @@index([locationId])
  @@index([reviewId])
  @@index([responseId])
}


