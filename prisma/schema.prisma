generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// *
/// * =========================
/// * Core Auth
/// * =========================
model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?
  image              String?
  role               Role                 @default(user)
  createdAt          DateTime             @default(now())
  deactivatedAt      DateTime?
  failedLoginCount   Int                  @default(0)
  isActive           Boolean              @default(true)
  isSuspended        Boolean              @default(false)
  lastLoginAt        DateTime?
  lastSeenAt         DateTime?
  locale             String?              @default("es-ES")
  loginCount         Int                  @default(0)
  marketingOptIn     Boolean              @default(false)
  notes              String?
  passwordHash       String?
  phone              String?
  privacyAcceptedAt  DateTime?
  suspendedAt        DateTime?
  suspendedReason    String?
  termsAcceptedAt    DateTime?
  timezone           String?              @default("Europe/Madrid")
  updatedAt          DateTime             @updatedAt
  Account            Account[]
  ExternalConnection ExternalConnection[]
  responsesCreated   Response[]           @relation("ResponseCreatedBy")
  responsesEdited    Response[]           @relation("ResponseEditedBy")
  Session            Session[]
  UserCompany        UserCompany[]
  UserLocation       UserLocation[]
  UserLogin          UserLogin[]
  UserStatusEvent    UserStatusEvent[]
  phasesCreated      Phase[]              @relation("UserPhasesCreated")

  @@index([role])
  @@index([isActive, isSuspended])
  @@index([lastLoginAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserLogin {
  id        String   @id @default(cuid())
  userId    String?
  provider  String?
  success   Boolean  @default(false)
  ip        String?
  userAgent String?
  error     String?
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model UserStatusEvent {
  id        String              @id @default(cuid())
  userId    String
  type      UserStatusEventType
  reason    String?
  createdAt DateTime            @default(now())
  User      User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model ExternalConnection {
  id             String     @id @default(cuid())
  userId         String
  provider       String
  accountEmail   String?
  access_token   String
  refresh_token  String?
  expires_at     Int?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  companyId      String?
  accountName    String?
  providerUserId String?
  scope          String?
  User           User       @relation(fields: [userId], references: [id])
  Location       Location[]

  @@unique([userId, provider])
  @@index([companyId])
}

model Company {
  id                   String             @id @default(cuid())
  name                 String
  createdById          String
  createdAt            DateTime           @default(now())
  activity             String?            @db.VarChar(64)
  cif                  String?            @db.VarChar(32)
  employeesBand        String?            @db.VarChar(32)
  logoUrl              String?
  address              String?
  brandColor           String?            @db.VarChar(16)
  city                 String?
  country              String?
  countryCode          String?            @db.VarChar(2)
  description          String?
  email                String?
  facebookUrl          String?
  instagramUrl         String?
  lastSyncAt           DateTime?
  linkedinUrl          String?
  matrix               String?            @db.VarChar(128)
  phone                String?
  postalCode           String?
  region               String?
  registryId           String?            @db.VarChar(64)
  reviewsAvg           Decimal?           @db.Decimal(3, 2)
  reviewsCount         Int                @default(0)
  twitterUrl           String?
  updatedAt            DateTime           @default(now()) @updatedAt
  vatNumber            String?            @db.VarChar(32)
  website              String?
  plan                 String?            @default("free")
  planRenewsAt         DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  agentSettings        Json?
  customers            CompanyCustomer[]
  jobs                 Job[]
  knowledgeItems       KnowledgeItem[]
  Lead                 Lead[]
  Location             Location[]
  LocationKpiDaily     LocationKpiDaily[] @relation("CompanyToKpiDaily")
  responseSettings     ResponseSettings?
  Reviews              Review[]           @relation("CompanyReviews")
  UserCompany          UserCompany[]
  WebchatSites         WebchatSite[]      @relation("CompanyToWebchatSite")
  Agents               Agent[]
  AgentSessions        AgentSession[]
  voiceAgentId         String?
  voiceAgent           VoiceAgent?        @relation("CompanyVoiceAgent", fields: [voiceAgentId], references: [id], onDelete: SetNull)

  @@index([name])
  @@index([activity])
  @@index([matrix])
}

model UserCompany {
  id        String      @id @default(cuid())
  userId    String
  companyId String
  role      CompanyRole @default(MEMBER)
  createdAt DateTime    @default(now())
  Company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  User      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@index([userId])
  @@index([companyId])
}

model Lead {
  id        String     @id @default(cuid())
  companyId String
  ownerId   String?
  name      String
  email     String?
  phone     String?
  source    LeadSource @default(UNKNOWN)
  status    LeadStatus @default(NEW)
  notes     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  company   Company    @relation(fields: [companyId], references: [id])

  @@index([companyId])
  @@index([ownerId])
  @@index([status])
}

model Location {
  id                   String              @id @default(cuid())
  companyId            String
  title                String
  address              String?
  city                 String?
  region               String?
  country              String?
  postalCode           String?
  phone                String?
  website              String?
  googleName           String?
  googlePlaceId        String?             @unique
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now()) @updatedAt
  address2             String?
  countryCode          String?             @db.VarChar(2)
  email                String?
  externalConnectionId String?
  facebookUrl          String?
  featuredImageUrl     String?
  googleAccountId      String?
  googleLocationId     String?
  instagramUrl         String?
  lastSyncAt           DateTime?
  latitude             Decimal?            @db.Decimal(10, 7)
  longitude            Decimal?            @db.Decimal(10, 7)
  openingHours         Json?
  reviewsAvg           Decimal?            @db.Decimal(3, 2)
  reviewsCount         Int                 @default(0)
  slug                 String?             @unique
  timezone             String?
  exceptions           Json? // jsonb
  isFeatured           Boolean             @default(false)
  activityId           String?
  typeId               String?
  status               LocationStatus?     @default(DRAFT)
  jobs                 Job[]
  activity             Activity?           @relation(fields: [activityId], references: [id])
  company              Company             @relation(fields: [companyId], references: [id])
  ExternalConnection   ExternalConnection? @relation(fields: [externalConnectionId], references: [id])
  type                 Type?               @relation(fields: [typeId], references: [id])
  KpiDaily             LocationKpiDaily[]  @relation("LocationToKpiDaily")
  Reviews              Review[]            @relation("LocationReviews")
  UserLocation         UserLocation[]
  WebchatSites         WebchatSite[]       @relation("LocationToWebchatSite")
  employeeLinks        EmployeeLocation[]
  resources            Resource[]
  services             Service[]
  appointments         Appointment[]
  employeeTimeOffs     EmployeeTimeOff[]
  resourceTimeOffs     ResourceTimeOff[]
  agentSessions        AgentSession[]

  @@index([companyId])
  @@index([googleAccountId])
  @@index([status])
  @@index([activityId])
  @@index([typeId])
}

model UserLocation {
  id         String       @id @default(cuid())
  userId     String
  locationId String
  createdAt  DateTime     @default(now())
  role       LocationRole @default(VIEWER)
  location   Location     @relation(fields: [locationId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, locationId])
  @@index([locationId])
}

model Review {
  id              String          @id @default(cuid())
  companyId       String
  locationId      String
  provider        ReviewProvider
  externalId      String
  reviewerName    String?
  reviewerPhoto   String?
  reviewerAnon    Boolean?
  rating          Int
  comment         String?
  languageCode    String?         @db.VarChar(8)
  createdAtG      DateTime?
  updatedAtG      DateTime?
  replyComment    String?
  replyUpdatedAtG DateTime?
  ingestedAt      DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
  isTest          Boolean         @default(false)
  jobs            Job[]
  responses       Response[]
  Company         Company         @relation("CompanyReviews", fields: [companyId], references: [id], onDelete: Cascade)
  Location        Location        @relation("LocationReviews", fields: [locationId], references: [id], onDelete: Cascade)
  analysis        ReviewAnalysis?

  @@unique([provider, externalId])
  @@index([companyId])
  @@index([locationId])
  @@index([rating])
  @@index([createdAtG])
}

model Response {
  id              String               @id @default(cuid())
  reviewId        String
  content         String
  status          ResponseStatus       @default(PENDING)
  active          Boolean              @default(true)
  published       Boolean              @default(false)
  edited          Boolean              @default(false)
  generationCount Int                  @default(1)
  lastGeneratedAt DateTime?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  publishedAt     DateTime?
  createdById     String?
  editedById      String?
  source          ResponseSource       @default(AI)
  model           String?
  temperature     Float?
  promptVersion   String?
  language        String?
  tone            String?
  businessType    String?
  moderationFlag  Boolean              @default(false)
  moderationNotes String?
  lastError       String?
  jobs            Job[]
  createdBy       User?                @relation("ResponseCreatedBy", fields: [createdById], references: [id])
  editedBy        User?                @relation("ResponseEditedBy", fields: [editedById], references: [id])
  review          Review               @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  publishLogs     ResponsePublishLog[]

  @@index([reviewId])
  @@index([status, published, active])
}

model LocationKpiDaily {
  id              String   @id @default(cuid())
  companyId       String
  locationId      String
  snapshotDate    DateTime
  totalReviews    Int
  newReviews7d    Int
  newReviews30d   Int
  unansweredCount Int
  answeredRate    Int
  avgAll          Decimal? @db.Decimal(3, 2)
  avg30d          Decimal? @db.Decimal(3, 2)
  prev30dAvg      Decimal? @db.Decimal(3, 2)
  responses7d     Int
  responseAvgSec  Int?
  lastComputedAt  DateTime @default(now())
  company         Company  @relation("CompanyToKpiDaily", fields: [companyId], references: [id], onDelete: Cascade)
  location        Location @relation("LocationToKpiDaily", fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([locationId, snapshotDate])
  @@index([companyId, snapshotDate])
  @@index([snapshotDate])
}

model ResponseSettings {
  id              String   @id @default(cuid())
  companyId       String   @unique
  config          Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdByUserId String?
  updatedByUserId String?
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([updatedAt])
}

model Activity {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  locations Location[]
  types     Type[]
}

model Type {
  id         String     @id @default(cuid())
  name       String
  activityId String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  locations  Location[]
  activity   Activity   @relation(fields: [activityId], references: [id])

  @@unique([activityId, name])
  @@index([activityId])
}

model ReviewAnalysis {
  id         String     @id @default(cuid())
  reviewId   String     @unique
  language   String?    @db.VarChar(8)
  sentiment  Sentiment?
  summary    String?
  keyPhrases String[]
  categories String[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  review     Review     @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([sentiment])
  @@index([createdAt])
}

model ResponsePublishLog {
  id            String         @id @default(cuid())
  responseId    String
  provider      ReviewProvider
  publishedAt   DateTime?
  externalMsgId String?
  payload       Json?
  error         String?
  createdAt     DateTime       @default(now())
  response      Response       @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@index([responseId, createdAt])
  @@index([provider, createdAt])
}

model Job {
  id          String    @id @default(cuid())
  type        JobType
  status      JobStatus @default(QUEUED)
  payload     Json?
  attempts    Int       @default(0)
  lastError   String?
  scheduledAt DateTime?
  startedAt   DateTime?
  finishedAt  DateTime?
  companyId   String?
  locationId  String?
  reviewId    String?
  responseId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  company     Company?  @relation(fields: [companyId], references: [id])
  location    Location? @relation(fields: [locationId], references: [id])
  response    Response? @relation(fields: [responseId], references: [id])
  review      Review?   @relation(fields: [reviewId], references: [id])

  @@index([status, type, scheduledAt])
  @@index([companyId])
  @@index([locationId])
  @@index([reviewId])
  @@index([responseId])
}

model WebchatSite {
  id             String            @id @default(cuid())
  companyId      String
  locationId     String?
  publicKey      String            @unique
  status         WebchatSiteStatus @default(ACTIVE)
  name           String
  settings       Json?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  knowledgeItems KnowledgeItem[]
  Messages       WebchatMessage[]
  Sessions       WebchatSession[]
  Company        Company           @relation("CompanyToWebchatSite", fields: [companyId], references: [id], onDelete: Cascade)
  Location       Location?         @relation("LocationToWebchatSite", fields: [locationId], references: [id])

  @@index([companyId])
  @@index([locationId])
}

model WebchatSession {
  id             String           @id @default(cuid())
  siteId         String
  visitorId      String
  startedAt      DateTime         @default(now())
  lastActivityAt DateTime         @default(now())
  meta           Json?
  Messages       WebchatMessage[]
  Site           WebchatSite      @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, visitorId])
  @@index([siteId, lastActivityAt])
}

model WebchatMessage {
  id        String         @id @default(cuid())
  siteId    String
  sessionId String
  role      WebchatRole
  text      String
  payload   Json?
  createdAt DateTime       @default(now())
  Session   WebchatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  Site      WebchatSite    @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId, createdAt])
  @@index([sessionId, createdAt])
}

model KnowledgeItem {
  id         String              @id @default(cuid())
  companyId  String
  siteId     String?
  title      String
  content    String
  visibility KnowledgeVisibility @default(PUBLIC)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  company    Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  site       WebchatSite?        @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([siteId])
  @@index([visibility])
}

/// *
/// * =========================
/// * Enums
/// * =========================
enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  LOST
  WON
}

enum LeadSource {
  UNKNOWN
  WEBSITE
  REFERRAL
  GOOGLE
  FACEBOOK
  YELP
  TRIPADVISOR
  OTHER
}

enum LocationType {
  HQ
  BRANCH
  FRANCHISE
}

enum Sentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
  MIXED
}

enum JobType {
  GENERATE_RESPONSE
  PUBLISH_RESPONSE
  SYNC_REVIEWS
  SYNC_LOCATIONS
  RECOMPUTE_KPI
}

enum JobStatus {
  QUEUED
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
}

enum LocationRole {
  MANAGER
  STAFF
  VIEWER
}

enum LocationStatus {
  ACTIVE
  INACTIVE
  DRAFT
  PENDING_VERIFICATION
}

enum Role {
  system_admin
  org_admin
  user
  test
}

enum ReviewProvider {
  GOOGLE
}

enum ResponseStatus {
  PENDING
  APPROVED
  PUBLISHED
  REJECTED
  DISABLED
}

enum ResponseSource {
  AI
  HUMAN
}

enum UserStatusEventType {
  CREATED
  ACTIVATED
  SUSPENDED
  REACTIVATED
  DEACTIVATED
}

enum WebchatRole {
  USER
  BOT
  AGENT
}

enum WebchatSiteStatus {
  ACTIVE
  PAUSED
  DISABLED
}

enum KnowledgeVisibility {
  PUBLIC
  PRIVATE
}

/// =========================
/// Employees & Roles (simple, sin company)
/// =========================

model Employee {
  id           String  @id @default(cuid())
  name         String
  notes        String?
  color        String?
  active       Boolean @default(true)
  timezone     String  @default("Europe/Madrid")
  openingHours Json?
  exceptions   Json?

  // N-N con Location (con metadata en el pivot)
  locations EmployeeLocation[]

  // Roles (globales por ahora)
  roles EmployeeRole[]

  appointments Appointment[]
  timeOffs     EmployeeTimeOff[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@index([active])
}

model StaffRole {
  id String @id @default(cuid())

  name      String
  slug      String
  color     String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  services  Service[]
  employees EmployeeRole[]

  @@unique([slug])
}

model EmployeeRole {
  id         String  @id @default(cuid())
  employeeId String
  roleId     String
  isPrimary  Boolean @default(false)

  employee Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  role     StaffRole @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([employeeId, roleId]) // no repetir el mismo rol
  @@index([employeeId])
  @@index([roleId])
}

model EmployeeLocation {
  id         String @id @default(cuid())
  employeeId String
  locationId String

  // Flags para el motor de calendario
  isPrimary                 Boolean @default(false)
  visibleInLocation         Boolean @default(true) // aparece al agendar en ESTA location
  allowCrossLocationBooking Boolean @default(false) // si true, puede aparecer en búsquedas cruzadas

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([employeeId, locationId])
  @@index([employeeId])
  @@index([locationId])
}

model ResourceType {
  id        String   @id @default(cuid())
  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  resources Resource[]

  @@unique([slug])
}

model Resource {
  id         String  @id @default(cuid())
  locationId String
  name       String
  notes      String?
  capacity   Int?
  active     Boolean @default(true)

  typeId String?
  type   ResourceType? @relation(fields: [typeId], references: [id], onDelete: SetNull)

  location     Location                @relation(fields: [locationId], references: [id], onDelete: Cascade)
  tags         ResourceTagOnResource[]
  appointments Appointment[]
  timeOffs     ResourceTimeOff[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResourceTag {
  id    String  @id @default(cuid())
  name  String
  slug  String
  color String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  resources ResourceTagOnResource[]

  // 👇 opposite nombrado; debe coincidir con Service.requiredTag
  services Service[] @relation("ServiceToResourceTag")

  @@unique([slug])
}

model ResourceTagOnResource {
  id            String @id @default(cuid())
  resourceId    String
  resourceTagId String

  resource Resource    @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  tag      ResourceTag @relation(fields: [resourceTagId], references: [id], onDelete: Cascade)

  @@unique([resourceId, resourceTagId])
}

/// =========================
/// Appointments - núcleo mínimo
/// =========================

enum AppointmentStatus {
  PENDING
  BOOKED
  COMPLETED
  CANCELLED
  NO_SHOW
}

model Service {
  id              String  @id @default(cuid())
  locationId      String
  name            String
  description     String?
  durationMin     Int     @default(30)
  bufferBeforeMin Int     @default(0)
  bufferAfterMin  Int     @default(0)
  color           String?

  // requisitos simples (v1)
  requiredRoleId        String?
  requiredResourceTagId String?

  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  location     Location   @relation(fields: [locationId], references: [id], onDelete: Cascade)
  requiredRole StaffRole? @relation(fields: [requiredRoleId], references: [id], onDelete: SetNull)

  // 👇 nombra la relación y que coincida con ResourceTag.services
  requiredTag ResourceTag? @relation("ServiceToResourceTag", fields: [requiredResourceTagId], references: [id], onDelete: SetNull)

  appointments  Appointment[]
  agentSessions AgentSession[]

  @@index([locationId])
  @@index([active])
  @@index([requiredRoleId])
  @@index([requiredResourceTagId])
}

model Appointment {
  id         String            @id @default(cuid())
  locationId String
  serviceId  String
  startAt    DateTime
  endAt      DateTime
  status     AppointmentStatus @default(PENDING)

  // asignaciones opcionales (el motor decidirá si faltan)
  employeeId String?
  resourceId String?

  // datos cliente (mínimos para empezar)
  customerId    String?
  customerName  String?
  customerPhone String?
  customerEmail String?

  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  location Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  service  Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  employee Employee? @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  resource Resource? @relation(fields: [resourceId], references: [id], onDelete: SetNull)
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  @@index([locationId, startAt])
  @@index([serviceId])
  @@index([employeeId, startAt])
  @@index([resourceId, startAt])
  @@index([status, startAt])
}

enum TimeOffType {
  VACATION
  SICK
  BLOCK
  OTHER
}

model EmployeeTimeOff {
  id         String   @id @default(cuid())
  employeeId String
  locationId String
  type       String   @default("BLOCK") // si quieres enum, lo definimos luego
  reason     String?
  startAt    DateTime
  endAt      DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@index([employeeId, startAt])
  @@index([locationId, startAt])
}

model ResourceTimeOff {
  id         String   @id @default(cuid())
  resourceId String
  locationId String
  type       String   @default("BLOCK")
  reason     String?
  startAt    DateTime
  endAt      DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  resource Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@index([resourceId, startAt])
  @@index([locationId, startAt])
}

// =========================
// Customers
// =========================
model Customer {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  phone     String // requerido
  email     String? // opcional
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación 1:N con citas
  appointments Appointment[]

  // Relación N:M con compañías (tabla puente)
  companies CompanyCustomer[]

  // Índices útiles para búsquedas (sin unique global para permitir duplicados cross-empresa)
  @@index([phone])
  @@index([email])
}

model CompanyCustomer {
  id         String   @id @default(cuid())
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  createdAt  DateTime @default(now())

  // Un cliente solo una vez por compañía
  @@unique([companyId, customerId])
  @@index([customerId, companyId])
}

/// =========================
/// Agents (base + Voice + Chat)
/// =========================

enum AgentChannel {
  VOICE
  CHAT
}

enum AgentStatus {
  ACTIVE
  PAUSED
  DISABLED
}

enum AgentSessionStatus {
  INIT
  LIVE
  ENDED
  ERROR
}

enum AgentTurnRole {
  USER
  AGENT
  SYSTEM
  TOOL
}

enum AgentLogLevel {
  INFO
  WARN
  ERROR
  DEBUG
}

model Agent {
  id        String       @id @default(cuid())
  companyId String
  name      String
  channel   AgentChannel
  status    AgentStatus  @default(ACTIVE)
  // metadatos genéricos del agente (labels, tags…)
  meta      Json?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  company  Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  voice    VoiceAgent?
  chat     ChatAgent?
  sessions AgentSession[]

  @@index([companyId, channel, status])
  @@index([name])
}

model VoiceAgent {
  id                 String  @id @default(cuid())
  agentId            String  @unique
  // configuración por defecto (fallback si no hay VoiceAgentSettings activo)
  defaultModel       String? // p.ej. "gpt-4o-mini"
  defaultTemperature Float?  @default(0.4)
  defaultPrompt      String? // prompt base de “persona” del agente
  // proveedor/telefonía (aunque simulemos, lo dejamos listo)
  provider           String? // "twilio", "mock", etc.
  providerConfig     Json? // claves/ids del proveedor
  // audio
  voiceName          String? // voz TTS
  language           String? @default("es-ES")

  agent     Agent                @relation(fields: [agentId], references: [id], onDelete: Cascade)
  settings  VoiceAgentSettings[]
  companies Company[]            @relation("CompanyVoiceAgent")
  phases    AgentPhase[]         @relation("VoiceAgentPhases")
}

model VoiceAgentSettings {
  id           String  @id @default(cuid())
  agentId      String
  // versionado de prompts / plantillas
  version      Int     @default(1)
  isActive     Boolean @default(true)
  prompt       String // prompt “persona” completo (puede incluir few-shots)
  model        String? // override de modelo
  temperature  Float?  @default(0.4)
  // políticas del turno (máx duración, silencios, barge-in, etc.)
  policy       Json? // {maxSeconds, silenceTimeoutMs, bargeIn:true, ...}
  // routing/capacidades (qué endpoints puede tocar)
  capabilities Json? // { canReadCalendar:true, canBook:true, ... }

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agent VoiceAgent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, isActive, version])
}

model ChatAgent {
  id                 String  @id @default(cuid())
  agentId            String  @unique
  defaultModel       String?
  defaultTemperature Float?  @default(0.3)
  defaultPrompt      String?

  agent    Agent               @relation(fields: [agentId], references: [id], onDelete: Cascade)
  settings ChatAgentSettings[]
}

model ChatAgentSettings {
  id           String  @id @default(cuid())
  agentId      String
  version      Int     @default(1)
  isActive     Boolean @default(true)
  prompt       String
  model        String?
  temperature  Float?  @default(0.3)
  policy       Json?
  capabilities Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agent ChatAgent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, isActive, version])
}

/// =========================
/// Sesiones, turnos, logs
/// =========================

model AgentSession {
  id        String             @id @default(cuid())
  agentId   String
  companyId String
  channel   AgentChannel
  status    AgentSessionStatus @default(INIT)

  // info de conversación/llamada
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  durationSec Int?
  // phone (aunque simulemos llamadas)
  caller      String? // número de cliente (tel) o userId si chat
  callee      String? // número de la clínica (si existiera)
  // vínculo con negocio
  locationId  String? // si la sesión se asocia a una ubicación concreta
  serviceId   String? // si el objetivo quedó claro

  meta  Json? // {conversationGoal, notes, tags:[], ...}
  error String? // motivo si status=ERROR

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agent    Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  company  Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  location Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  service  Service?  @relation(fields: [serviceId], references: [id], onDelete: SetNull)

  turns AgentTurn[]
  logs  AgentLog[]

  @@index([agentId, companyId, channel, status])
  @@index([startedAt])
}

model AgentTurn {
  id        String        @id @default(cuid())
  sessionId String
  role      AgentTurnRole // USER | AGENT | SYSTEM | TOOL
  text      String? // texto transcrito o generado
  audioUrl  String? // si guardas TTS o grabación
  payload   Json? // {nlu, entities, toolCalls, modelRaw, ...}
  createdAt DateTime      @default(now())

  session AgentSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, createdAt])
  @@index([role])
}

model AgentLog {
  id        String        @id @default(cuid())
  sessionId String
  level     AgentLogLevel @default(INFO)
  message   String
  payload   Json?
  createdAt DateTime      @default(now())

  session AgentSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, level, createdAt])
}

/// ==============================
/// Fases reutilizables
/// ==============================
model Phase {
  id     String    @id @default(cuid())
  key    String // slug estable, reutilizable p.ej. "intro", "solicitud_datos"
  label  String // nombre visible
  type   PhaseType @default(CUSTOM)
  prompt String // plantilla base (se puede sobrescribir en AgentPhase.overrides)
  meta   Json? // datos auxiliares (checklists, UI hints…)

  // Relaciones
  agents AgentPhase[] // N–N con VoiceAgent a través de AgentPhase

  // Auditoría
  createdById String?
  createdBy   User?    @relation("UserPhasesCreated", fields: [createdById], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([key])
}

/// ==============================
/// Pivot N–N con orden/prioridad/overrides
/// ==============================
model AgentPhase {
  id        String  @id @default(cuid())
  agentId   String
  phaseId   String
  order     Int
  priority  Int?
  overrides Json?
  isEnabled Boolean @default(true)

  agent VoiceAgent @relation("VoiceAgentPhases", fields: [agentId], references: [id], onDelete: Cascade)
  phase Phase      @relation(fields: [phaseId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([agentId, phaseId])
  @@index([agentId, order])
}

/// Tipos de fase canónicos
enum PhaseType {
  INTRO
  COLLECT
  INTENT
  CUSTOM
}
