generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// *
/// * =========================
/// * Core Auth
/// * =========================
model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?
  image              String?
  role               Role                 @default(user)
  createdAt          DateTime             @default(now())
  deactivatedAt      DateTime?
  failedLoginCount   Int                  @default(0)
  isActive           Boolean              @default(true)
  isSuspended        Boolean              @default(false)
  lastLoginAt        DateTime?
  lastSeenAt         DateTime?
  locale             String?              @default("es-ES")
  loginCount         Int                  @default(0)
  marketingOptIn     Boolean              @default(false)
  notes              String?
  passwordHash       String?
  phone              String?
  privacyAcceptedAt  DateTime?
  suspendedAt        DateTime?
  suspendedReason    String?
  termsAcceptedAt    DateTime?
  timezone           String?              @default("Europe/Madrid")
  updatedAt          DateTime             @updatedAt
  Account            Account[]
  ExternalConnection ExternalConnection[]
  phasesCreated      Phase[]              @relation("UserPhasesCreated")
  responsesCreated   Response[]           @relation("ResponseCreatedBy")
  responsesEdited    Response[]           @relation("ResponseEditedBy")
  Session            Session[]
  UserCompany        UserCompany[]
  UserLocation       UserLocation[]
  UserLogin          UserLogin[]
  UserStatusEvent    UserStatusEvent[]

  @@index([role])
  @@index([isActive, isSuspended])
  @@index([lastLoginAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserLogin {
  id        String   @id @default(cuid())
  userId    String?
  provider  String?
  success   Boolean  @default(false)
  ip        String?
  userAgent String?
  error     String?
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model UserStatusEvent {
  id        String              @id @default(cuid())
  userId    String
  type      UserStatusEventType
  reason    String?
  createdAt DateTime            @default(now())
  User      User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model ExternalConnection {
  id             String     @id @default(cuid())
  userId         String
  provider       String
  accountEmail   String?
  access_token   String
  refresh_token  String?
  expires_at     Int?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  companyId      String?
  accountName    String?
  providerUserId String?
  scope          String?
  User           User       @relation(fields: [userId], references: [id])
  Location       Location[]

  @@unique([userId, provider])
  @@index([companyId])
}

model Company {
  id                   String                 @id @default(cuid())
  name                 String
  createdById          String
  createdAt            DateTime               @default(now())
  activity             String?                @db.VarChar(64)
  cif                  String?                @db.VarChar(32)
  employeesBand        String?                @db.VarChar(32)
  logoUrl              String?
  address              String?
  brandColor           String?                @db.VarChar(16)
  city                 String?
  country              String?
  countryCode          String?                @db.VarChar(2)
  description          String?
  email                String?
  facebookUrl          String?
  instagramUrl         String?
  lastSyncAt           DateTime?
  linkedinUrl          String?
  matrix               String?                @db.VarChar(128)
  phone                String?
  postalCode           String?
  region               String?
  registryId           String?                @db.VarChar(64)
  reviewsAvg           Decimal?               @db.Decimal(3, 2)
  reviewsCount         Int                    @default(0)
  twitterUrl           String?
  updatedAt            DateTime               @default(now()) @updatedAt
  vatNumber            String?                @db.VarChar(32)
  website              String?
  plan                 String?                @default("free")
  planRenewsAt         DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  agentSettings        Json?
  voiceAgentId         String?
  Agents               Agent[]
  AgentSessions        AgentSession[]
  voiceAgent           VoiceAgent?            @relation("CompanyVoiceAgent", fields: [voiceAgentId], references: [id])
  customers            CompanyCustomer[]
  jobs                 Job[]
  knowledgeItems       KnowledgeItem[]
  knowledgeSections    KnowledgeSection[]
  knowledgeSpaces      KnowledgeSpace[]
  Lead                 Lead[]
  Location             Location[]
  LocationKpiDaily     LocationKpiDaily[]     @relation("CompanyToKpiDaily")
  responseSettings     ResponseSettings?
  Reviews              Review[]               @relation("CompanyReviews")
  UserCompany          UserCompany[]
  WebchatSites         WebchatSite[]          @relation("CompanyToWebchatSite")
  billing_account      billing_account[]
  discount_redemption  discount_redemption[]
  entitlement          entitlement[]
  invoice              invoice[]
  review_concept       review_concept[]
  review_concept_input review_concept_input[]
  review_theme         review_theme[]
  subscription         subscription[]
  theme_candidate      theme_candidate[]
  themes               themes[]

  @@index([name])
  @@index([activity])
  @@index([matrix])
}

model UserCompany {
  id        String      @id @default(cuid())
  userId    String
  companyId String
  role      CompanyRole @default(MEMBER)
  createdAt DateTime    @default(now())
  Company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  User      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@index([userId])
  @@index([companyId])
}

model Lead {
  id        String     @id @default(cuid())
  companyId String
  ownerId   String?
  name      String
  email     String?
  phone     String?
  source    LeadSource @default(UNKNOWN)
  status    LeadStatus @default(NEW)
  notes     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  company   Company    @relation(fields: [companyId], references: [id])

  @@index([companyId])
  @@index([ownerId])
  @@index([status])
}

model Location {
  id                   String                 @id @default(cuid())
  companyId            String
  title                String
  address              String?
  city                 String?
  region               String?
  country              String?
  postalCode           String?
  phone                String?
  website              String?
  googleName           String?
  googlePlaceId        String?                @unique
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now()) @updatedAt
  address2             String?
  countryCode          String?                @db.VarChar(2)
  email                String?
  externalConnectionId String?
  facebookUrl          String?
  featuredImageUrl     String?
  googleAccountId      String?
  googleLocationId     String?
  instagramUrl         String?
  lastSyncAt           DateTime?
  latitude             Decimal?               @db.Decimal(10, 7)
  longitude            Decimal?               @db.Decimal(10, 7)
  openingHours         Json?
  reviewsAvg           Decimal?               @db.Decimal(3, 2)
  reviewsCount         Int                    @default(0)
  slug                 String?                @unique
  status               LocationStatus?        @default(DRAFT)
  timezone             String?
  isFeatured           Boolean                @default(false)
  activityId           String?
  typeId               String?
  exceptions           Json?
  agentSessions        AgentSession[]
  appointments         Appointment[]
  employeeLinks        EmployeeLocation[]
  employeeTimeOffs     EmployeeTimeOff[]
  jobs                 Job[]
  activity             Activity?              @relation(fields: [activityId], references: [id])
  company              Company                @relation(fields: [companyId], references: [id])
  ExternalConnection   ExternalConnection?    @relation(fields: [externalConnectionId], references: [id])
  type                 Type?                  @relation(fields: [typeId], references: [id])
  KpiDaily             LocationKpiDaily[]     @relation("LocationToKpiDaily")
  resources            Resource[]
  resourceTimeOffs     ResourceTimeOff[]
  Reviews              Review[]               @relation("LocationReviews")
  services             Service[]
  UserLocation         UserLocation[]
  WebchatSites         WebchatSite[]          @relation("LocationToWebchatSite")
  review_concept       review_concept[]
  review_concept_input review_concept_input[]
  review_theme         review_theme[]
  theme_candidate      theme_candidate[]
  themes               themes[]

  @@index([companyId])
  @@index([googleAccountId])
  @@index([status])
  @@index([activityId])
  @@index([typeId])
}

model UserLocation {
  id         String       @id @default(cuid())
  userId     String
  locationId String
  createdAt  DateTime     @default(now())
  role       LocationRole @default(VIEWER)
  location   Location     @relation(fields: [locationId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, locationId])
  @@index([locationId])
}

model Review {
  id              String          @id @default(cuid())
  companyId       String
  locationId      String
  provider        ReviewProvider
  externalId      String
  reviewerName    String?
  reviewerPhoto   String?
  reviewerAnon    Boolean?
  rating          Int
  comment         String?
  languageCode    String?         @db.VarChar(8)
  createdAtG      DateTime?
  updatedAtG      DateTime?
  replyComment    String?
  replyUpdatedAtG DateTime?
  ingestedAt      DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
  isTest          Boolean         @default(false)
  jobs            Job[]
  responses       Response[]
  Company         Company         @relation("CompanyReviews", fields: [companyId], references: [id], onDelete: Cascade)
  Location        Location        @relation("LocationReviews", fields: [locationId], references: [id], onDelete: Cascade)
  analysis        ReviewAnalysis?
  review_theme    review_theme[]

  @@unique([provider, externalId])
  @@index([companyId])
  @@index([locationId])
  @@index([rating])
  @@index([createdAtG])
}

model Response {
  id              String               @id @default(cuid())
  reviewId        String
  content         String
  status          ResponseStatus       @default(PENDING)
  active          Boolean              @default(true)
  published       Boolean              @default(false)
  edited          Boolean              @default(false)
  generationCount Int                  @default(1)
  lastGeneratedAt DateTime?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  publishedAt     DateTime?
  createdById     String?
  editedById      String?
  source          ResponseSource       @default(AI)
  model           String?
  temperature     Float?
  promptVersion   String?
  language        String?
  tone            String?
  businessType    String?
  moderationFlag  Boolean              @default(false)
  moderationNotes String?
  lastError       String?
  jobs            Job[]
  createdBy       User?                @relation("ResponseCreatedBy", fields: [createdById], references: [id])
  editedBy        User?                @relation("ResponseEditedBy", fields: [editedById], references: [id])
  review          Review               @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  publishLogs     ResponsePublishLog[]

  @@index([reviewId])
  @@index([status, published, active])
}

model LocationKpiDaily {
  id              String   @id @default(cuid())
  companyId       String
  locationId      String
  snapshotDate    DateTime
  totalReviews    Int
  newReviews7d    Int
  newReviews30d   Int
  unansweredCount Int
  answeredRate    Int
  avgAll          Decimal? @db.Decimal(3, 2)
  avg30d          Decimal? @db.Decimal(3, 2)
  prev30dAvg      Decimal? @db.Decimal(3, 2)
  responses7d     Int
  responseAvgSec  Int?
  lastComputedAt  DateTime @default(now())
  company         Company  @relation("CompanyToKpiDaily", fields: [companyId], references: [id], onDelete: Cascade)
  location        Location @relation("LocationToKpiDaily", fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([locationId, snapshotDate])
  @@index([companyId, snapshotDate])
  @@index([snapshotDate])
}

model ResponseSettings {
  id              String   @id @default(cuid())
  companyId       String   @unique
  config          Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdByUserId String?
  updatedByUserId String?
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([updatedAt])
}

model Activity {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  locations Location[]
  types     Type[]
}

model Type {
  id         String     @id @default(cuid())
  name       String
  activityId String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  locations  Location[]
  activity   Activity   @relation(fields: [activityId], references: [id])

  @@unique([activityId, name])
  @@index([activityId])
}

model ReviewAnalysis {
  id         String     @id @default(cuid())
  reviewId   String     @unique
  language   String?    @db.VarChar(8)
  sentiment  Sentiment?
  summary    String?
  keyPhrases String[]
  categories String[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  review     Review     @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([sentiment])
  @@index([createdAt])
}

model ResponsePublishLog {
  id            String         @id @default(cuid())
  responseId    String
  provider      ReviewProvider
  publishedAt   DateTime?
  externalMsgId String?
  payload       Json?
  error         String?
  createdAt     DateTime       @default(now())
  response      Response       @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@index([responseId, createdAt])
  @@index([provider, createdAt])
}

model Job {
  id          String    @id @default(cuid())
  type        JobType
  status      JobStatus @default(QUEUED)
  payload     Json?
  attempts    Int       @default(0)
  lastError   String?
  scheduledAt DateTime?
  startedAt   DateTime?
  finishedAt  DateTime?
  companyId   String?
  locationId  String?
  reviewId    String?
  responseId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  company     Company?  @relation(fields: [companyId], references: [id])
  location    Location? @relation(fields: [locationId], references: [id])
  response    Response? @relation(fields: [responseId], references: [id])
  review      Review?   @relation(fields: [reviewId], references: [id])

  @@index([status, type, scheduledAt])
  @@index([companyId])
  @@index([locationId])
  @@index([reviewId])
  @@index([responseId])
}

model WebchatSite {
  id             String            @id @default(cuid())
  companyId      String
  locationId     String?
  publicKey      String            @unique
  status         WebchatSiteStatus @default(ACTIVE)
  name           String
  settings       Json?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  knowledgeItems KnowledgeItem[]
  Messages       WebchatMessage[]
  Sessions       WebchatSession[]
  Company        Company           @relation("CompanyToWebchatSite", fields: [companyId], references: [id], onDelete: Cascade)
  Location       Location?         @relation("LocationToWebchatSite", fields: [locationId], references: [id])

  @@index([companyId])
  @@index([locationId])
}

model WebchatSession {
  id             String           @id @default(cuid())
  siteId         String
  visitorId      String
  startedAt      DateTime         @default(now())
  lastActivityAt DateTime         @default(now())
  meta           Json?
  Messages       WebchatMessage[]
  Site           WebchatSite      @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, visitorId])
  @@index([siteId, lastActivityAt])
}

model WebchatMessage {
  id        String         @id @default(cuid())
  siteId    String
  sessionId String
  role      WebchatRole
  text      String
  payload   Json?
  createdAt DateTime       @default(now())
  Session   WebchatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  Site      WebchatSite    @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId, createdAt])
  @@index([sessionId, createdAt])
}

model KnowledgeItem {
  id         String              @id @default(cuid())
  companyId  String
  siteId     String?
  title      String
  content    String
  visibility KnowledgeVisibility @default(PUBLIC)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  company    Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  site       WebchatSite?        @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([siteId])
  @@index([visibility])
}

model Employee {
  id           String             @id @default(cuid())
  name         String
  notes        String?
  color        String?
  active       Boolean            @default(true)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  exceptions   Json?
  openingHours Json?
  timezone     String             @default("Europe/Madrid")
  appointments Appointment[]
  locations    EmployeeLocation[]
  roles        EmployeeRole[]
  timeOffs     EmployeeTimeOff[]

  @@index([active])
}

model StaffRole {
  id        String         @id @default(cuid())
  name      String
  slug      String         @unique
  color     String?
  active    Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  employees EmployeeRole[]
  services  Service[]
}

model EmployeeRole {
  id         String    @id @default(cuid())
  employeeId String
  roleId     String
  isPrimary  Boolean   @default(false)
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  role       StaffRole @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([employeeId, roleId])
  @@index([employeeId])
  @@index([roleId])
}

model EmployeeLocation {
  id                        String   @id @default(cuid())
  employeeId                String
  locationId                String
  isPrimary                 Boolean  @default(false)
  visibleInLocation         Boolean  @default(true)
  allowCrossLocationBooking Boolean  @default(false)
  employee                  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  location                  Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([employeeId, locationId])
  @@index([employeeId])
  @@index([locationId])
}

model ResourceType {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  resources Resource[]
}

model Resource {
  id           String                  @id @default(cuid())
  locationId   String
  name         String
  notes        String?
  capacity     Int?
  active       Boolean                 @default(true)
  typeId       String?
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  appointments Appointment[]
  location     Location                @relation(fields: [locationId], references: [id], onDelete: Cascade)
  type         ResourceType?           @relation(fields: [typeId], references: [id])
  tags         ResourceTagOnResource[]
  timeOffs     ResourceTimeOff[]
}

model ResourceTag {
  id        String                  @id @default(cuid())
  name      String
  slug      String                  @unique
  color     String?
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
  resources ResourceTagOnResource[]
  services  Service[]               @relation("ServiceToResourceTag")
}

model ResourceTagOnResource {
  id            String      @id @default(cuid())
  resourceId    String
  resourceTagId String
  resource      Resource    @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  tag           ResourceTag @relation(fields: [resourceTagId], references: [id], onDelete: Cascade)

  @@unique([resourceId, resourceTagId])
}

model Service {
  id                    String         @id @default(cuid())
  locationId            String
  name                  String
  description           String?
  durationMin           Int            @default(30)
  bufferBeforeMin       Int            @default(0)
  bufferAfterMin        Int            @default(0)
  color                 String?
  requiredRoleId        String?
  requiredResourceTagId String?
  active                Boolean        @default(true)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  priceCents            Int            @default(0)
  price                 Decimal        @default(0) @db.Decimal(10, 2)
  agentSessions         AgentSession[]
  appointments          Appointment[]
  location              Location       @relation(fields: [locationId], references: [id], onDelete: Cascade)
  requiredTag           ResourceTag?   @relation("ServiceToResourceTag", fields: [requiredResourceTagId], references: [id])
  requiredRole          StaffRole?     @relation(fields: [requiredRoleId], references: [id])

  @@index([locationId])
  @@index([active])
  @@index([requiredRoleId])
  @@index([requiredResourceTagId])
}

model Appointment {
  id                 String            @id @default(cuid())
  locationId         String
  serviceId          String
  startAt            DateTime
  endAt              DateTime
  status             AppointmentStatus @default(PENDING)
  employeeId         String?
  resourceId         String?
  customerName       String?
  customerPhone      String?
  customerEmail      String?
  notes              String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  customerId         String?
  createdByAgentId   String?
  createdInSessionId String?
  createdByAgent     Agent?            @relation("AppointmentCreatedByAgent", fields: [createdByAgentId], references: [id])
  createdInSession   AgentSession?     @relation("AppointmentCreatedInSession", fields: [createdInSessionId], references: [id])
  customer           Customer?         @relation(fields: [customerId], references: [id])
  employee           Employee?         @relation(fields: [employeeId], references: [id])
  location           Location          @relation(fields: [locationId], references: [id], onDelete: Cascade)
  resource           Resource?         @relation(fields: [resourceId], references: [id])
  service            Service           @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([employeeId, startAt])
  @@index([locationId, startAt])
  @@index([createdByAgentId])
  @@index([createdInSessionId])
}

model EmployeeTimeOff {
  id         String   @id @default(cuid())
  employeeId String
  locationId String
  reason     String?
  startAt    DateTime
  endAt      DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  type       String   @default("BLOCK")
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@index([employeeId, startAt])
  @@index([locationId, startAt])
  @@index([employeeId, startAt], map: "EmployeeTimeOff_employee_start_idx")
  @@index([locationId, startAt], map: "EmployeeTimeOff_location_start_idx")
}

model ResourceTimeOff {
  id         String   @id @default(cuid())
  resourceId String
  locationId String
  reason     String?
  startAt    DateTime
  endAt      DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  type       String   @default("BLOCK")
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@index([resourceId, startAt])
  @@index([locationId, startAt])
  @@index([locationId, startAt], map: "ResourceTimeOff_location_start_idx")
  @@index([resourceId, startAt], map: "ResourceTimeOff_resource_start_idx")
}

model Customer {
  id                 String            @id @default(cuid())
  firstName          String
  lastName           String
  phone              String
  email              String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  createdByAgentId   String?
  createdInSessionId String?
  appointments       Appointment[]
  companies          CompanyCustomer[]
  createdByAgent     Agent?            @relation("CustomerCreatedByAgent", fields: [createdByAgentId], references: [id])
  createdInSession   AgentSession?     @relation("CustomerCreatedInSession", fields: [createdInSessionId], references: [id])

  @@index([phone])
  @@index([createdInSessionId])
  @@index([createdByAgentId])
}

model CompanyCustomer {
  id         String   @id @default(cuid())
  companyId  String
  customerId String
  createdAt  DateTime @default(now())
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([companyId, customerId])
  @@index([customerId, companyId])
}

model Agent {
  id                  String                @id @default(cuid())
  companyId           String
  name                String
  channel             AgentChannel
  status              AgentStatus           @default(ACTIVE)
  meta                Json?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  company             Company               @relation(fields: [companyId], references: [id], onDelete: Cascade)
  knowledgeSpaces     AgentKnowledgeSpace[]
  sessions            AgentSession[]
  appointmentsCreated Appointment[]         @relation("AppointmentCreatedByAgent")
  chat                ChatAgent?
  customersCreated    Customer[]            @relation("CustomerCreatedByAgent")
  voice               VoiceAgent?

  @@index([companyId, channel, status])
  @@index([name])
}

model VoiceAgent {
  id                 String               @id @default(cuid())
  agentId            String               @unique
  defaultModel       String?
  defaultTemperature Float?               @default(0.4)
  defaultPrompt      String?
  provider           String?
  providerConfig     Json?
  voiceName          String?
  language           String?              @default("es-ES")
  phases             AgentPhase[]         @relation("VoiceAgentPhases")
  companies          Company[]            @relation("CompanyVoiceAgent")
  agent              Agent                @relation(fields: [agentId], references: [id], onDelete: Cascade)
  settings           VoiceAgentSettings[]
}

model VoiceAgentSettings {
  id           String     @id @default(cuid())
  agentId      String
  version      Int        @default(1)
  isActive     Boolean    @default(true)
  prompt       String
  model        String?
  temperature  Float?     @default(0.4)
  policy       Json?
  capabilities Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  agent        VoiceAgent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, isActive, version])
}

model ChatAgent {
  id                 String              @id @default(cuid())
  agentId            String              @unique
  defaultModel       String?
  defaultTemperature Float?              @default(0.3)
  defaultPrompt      String?
  agent              Agent               @relation(fields: [agentId], references: [id], onDelete: Cascade)
  settings           ChatAgentSettings[]
}

model ChatAgentSettings {
  id           String    @id @default(cuid())
  agentId      String
  version      Int       @default(1)
  isActive     Boolean   @default(true)
  prompt       String
  model        String?
  temperature  Float?    @default(0.3)
  policy       Json?
  capabilities Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  agent        ChatAgent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, isActive, version])
}

model AgentSession {
  id                  String             @id @default(cuid())
  agentId             String
  companyId           String
  channel             AgentChannel
  status              AgentSessionStatus @default(INIT)
  endedAt             DateTime?
  durationSec         Int?
  caller              String?
  callee              String?
  locationId          String?
  serviceId           String?
  settings            Json?              @map("meta")
  startedAt           DateTime           @default(now()) @map("createdAt")
  updatedAt           DateTime           @updatedAt @map("updatedAt")
  clientIp            String?
  environment         AgentEnvironment   @default(TEST)
  instructions        String?
  language            String?            @default("es")
  model               String?
  source              String?            @default("constructor")
  temperature         Float?
  userAgent           String?
  voice               String?
  logs                AgentLog[]
  agent               Agent              @relation(fields: [agentId], references: [id], onDelete: Cascade)
  company             Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  location            Location?          @relation(fields: [locationId], references: [id])
  service             Service?           @relation(fields: [serviceId], references: [id])
  turns               AgentTurn[]
  createdAppointments Appointment[]      @relation("AppointmentCreatedInSession")
  createdCustomers    Customer[]         @relation("CustomerCreatedInSession")

  @@index([agentId, companyId, channel, status])
  @@index([environment, startedAt])
  @@index([startedAt])
}

model AgentTurn {
  id        String        @id @default(cuid())
  sessionId String
  role      AgentTurnRole
  text      String?
  audioUrl  String?
  payload   Json?
  createdAt DateTime      @default(now())
  session   AgentSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, createdAt])
  @@index([role])
}

model AgentLog {
  id        String        @id @default(cuid())
  sessionId String
  level     AgentLogLevel @default(INFO)
  message   String
  payload   Json?
  createdAt DateTime      @default(now())
  session   AgentSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, level, createdAt])
}

/// ==============================
/// Fases reutilizables
/// ==============================
model Phase {
  id          String       @id @default(cuid())
  key         String       @unique
  label       String
  type        PhaseType    @default(CUSTOM)
  prompt      String
  meta        Json?
  createdById String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  agents      AgentPhase[]
  createdBy   User?        @relation("UserPhasesCreated", fields: [createdById], references: [id])
}

/// ==============================
/// Pivot N–N con orden/prioridad/overrides
/// ==============================
model AgentPhase {
  id        String     @id @default(cuid())
  agentId   String
  phaseId   String
  order     Int
  priority  Int?
  overrides Json?
  isEnabled Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  agent     VoiceAgent @relation("VoiceAgentPhases", fields: [agentId], references: [id], onDelete: Cascade)
  phase     Phase      @relation(fields: [phaseId], references: [id])

  @@unique([agentId, phaseId])
  @@index([agentId, order])
}

model KnowledgeSpace {
  id                String                @id @default(cuid())
  companyId         String
  name              String
  scope             KnowledgeScope        @default(COMPANY)
  isActive          Boolean               @default(true)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  agents            AgentKnowledgeSpace[]
  docs              KnowledgeDoc[]
  knowledgeSections KnowledgeSection[]
  company           Company               @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, scope, isActive])
}

model KnowledgeDoc {
  id         String           @id @default(cuid())
  spaceId    String
  title      String
  sourceUrl  String?
  mime       String?
  text       String
  tokens     Int?
  chunkCount Int?
  updatedAt  DateTime         @default(now()) @updatedAt
  createdAt  DateTime         @default(now())
  chunks     KnowledgeChunk[]
  space      KnowledgeSpace   @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@index([spaceId, updatedAt])
}

model KnowledgeChunk {
  id      String       @id @default(cuid())
  docId   String
  idx     Int
  content String
  doc     KnowledgeDoc @relation(fields: [docId], references: [id], onDelete: Cascade)

  @@unique([docId, idx])
  @@index([docId])
}

model AgentKnowledgeSpace {
  id      String         @id @default(cuid())
  agentId String
  spaceId String
  agent   Agent          @relation(fields: [agentId], references: [id], onDelete: Cascade)
  space   KnowledgeSpace @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@unique([agentId, spaceId])
  @@index([spaceId])
}

model KnowledgeSection {
  id         String              @id @default(cuid())
  companyId  String
  spaceId    String?
  title      String
  slug       String
  content    String
  visibility KnowledgeVisibility @default(PUBLIC)
  position   Int                 @default(0)
  isActive   Boolean             @default(true)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  company    Company             @relation(fields: [companyId], references: [id])
  space      KnowledgeSpace?     @relation(fields: [spaceId], references: [id])

  @@unique([companyId, slug])
  @@index([companyId])
  @@index([spaceId])
}

model billing_account {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id     String
  name           String
  billing_email  String?
  phone          String?
  tax_id         String?
  currency       String           @default("EUR") @db.Char(3)
  address_line1  String?
  address_line2  String?
  city           String?
  region         String?
  postal_code    String?
  country_code   String?          @db.Char(2)
  meta           Json?
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @db.Timestamptz(6)
  Company        Company          @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_ba_company")
  invoice        invoice[]
  payment_method payment_method[]
  subscription   subscription[]

  @@index([company_id], map: "idx_billing_account_company")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model discount {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code                   String?                  @unique
  name                   String?
  percent_off            Decimal?                 @db.Decimal(5, 2)
  amount_off_cents       BigInt?
  currency               String?                  @db.Char(3)
  duration               discount_duration        @default(ONCE)
  duration_in_months     Int?
  starts_at              DateTime?                @db.Timestamptz(6)
  ends_at                DateTime?                @db.Timestamptz(6)
  max_redemptions        Int?
  is_active              Boolean                  @default(true)
  applies_once_per_user  Boolean                  @default(true)
  meta                   Json?
  created_at             DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at             DateTime                 @default(now()) @db.Timestamptz(6)
  discount_applicability discount_applicability[]
  discount_redemption    discount_redemption[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model discount_applicability {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  discount_id String   @db.Uuid
  product_id  String?  @db.Uuid
  price_id    String?  @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  discount    discount @relation(fields: [discount_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_discapp_discount")
  price       price?   @relation(fields: [price_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_discapp_price")
  product     product? @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_discapp_product")

  @@index([discount_id], map: "idx_discapp_discount")
  @@index([price_id], map: "idx_discapp_price")
  @@index([product_id], map: "idx_discapp_product")
}

model discount_redemption {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  discount_id     String   @db.Uuid
  company_id      String
  subscription_id String?  @db.Uuid
  invoice_id      String?  @db.Uuid
  redeemed_at     DateTime @default(now()) @db.Timestamptz(6)
  meta            Json?
  Company         Company  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_red_company")
  discount        discount @relation(fields: [discount_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_red_disc")

  @@index([company_id], map: "idx_red_company")
  @@index([discount_id], map: "idx_red_discount")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model entitlement {
  id         String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id String
  product_id String             @db.Uuid
  source     entitlement_source @default(SUBSCRIPTION)
  quantity   Int                @default(1)
  active     Boolean            @default(true)
  start_at   DateTime           @default(now()) @db.Timestamptz(6)
  end_at     DateTime?          @db.Timestamptz(6)
  meta       Json?
  created_at DateTime           @default(now()) @db.Timestamptz(6)
  updated_at DateTime           @default(now()) @db.Timestamptz(6)
  Company    Company            @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_ent_company")
  product    product            @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_ent_product")

  @@index([company_id, product_id, active], map: "idx_ent_company_product")
}

model invoice {
  id                 String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id         String
  billing_account_id String          @db.Uuid
  number             String?         @unique
  status             invoice_status  @default(DRAFT)
  issued_at          DateTime?       @db.Timestamptz(6)
  due_at             DateTime?       @db.Timestamptz(6)
  currency           String          @default("EUR") @db.Char(3)
  subtotal_cents     BigInt          @default(0)
  tax_cents          BigInt          @default(0)
  discount_cents     BigInt          @default(0)
  total_cents        BigInt          @default(0)
  meta               Json?
  created_at         DateTime        @default(now()) @db.Timestamptz(6)
  updated_at         DateTime        @default(now()) @db.Timestamptz(6)
  billing_account    billing_account @relation(fields: [billing_account_id], references: [id], onUpdate: NoAction, map: "fk_inv_ba")
  Company            Company         @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_inv_company")
  invoice_item       invoice_item[]
  payment            payment[]

  @@index([company_id, status], map: "idx_invoice_company_status")
  @@index([issued_at, due_at], map: "idx_invoice_dates")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model invoice_item {
  id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice_id           String             @db.Uuid
  subscription_item_id String?            @db.Uuid
  product_id           String?            @db.Uuid
  price_id             String?            @db.Uuid
  description          String?
  quantity             Int                @default(1)
  unit_amount_cents    BigInt             @default(0)
  amount_cents         BigInt             @default(0)
  meta                 Json?
  created_at           DateTime           @default(now()) @db.Timestamptz(6)
  invoice              invoice            @relation(fields: [invoice_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_iitem_invoice")
  price                price?             @relation(fields: [price_id], references: [id], onUpdate: NoAction, map: "fk_iitem_price")
  product              product?           @relation(fields: [product_id], references: [id], onUpdate: NoAction, map: "fk_iitem_product")
  subscription_item    subscription_item? @relation(fields: [subscription_item_id], references: [id], onUpdate: NoAction, map: "fk_iitem_sitem")

  @@index([invoice_id], map: "idx_iitem_invoice")
}

model location_stats {
  location_id      String    @id
  reviews_count    Int       @default(0)
  rating_sum       Int       @default(0)
  avg_rating       Decimal?  @default(dbgenerated("\nCASE\n    WHEN (reviews_count > 0) THEN round(((rating_sum)::numeric / (reviews_count)::numeric), 2)\n    ELSE NULL::numeric\nEND")) @db.Decimal(3, 2)
  unanswered_count Int       @default(0)
  last_review_at   DateTime? @db.Timestamptz(6)
  updated_at       DateTime  @default(now()) @db.Timestamptz(6)

  @@index([avg_rating], map: "idx_location_stats_avg_rating")
  @@index([last_review_at], map: "idx_location_stats_last_review_at")
  @@index([unanswered_count], map: "idx_location_stats_unanswered")
}

model payment {
  id                   String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invoice_id           String          @db.Uuid
  payment_method_id    String?         @db.Uuid
  status               payment_status  @default(PENDING)
  amount_cents         BigInt          @default(0)
  currency             String          @default("EUR") @db.Char(3)
  provider             String?
  provider_payment_ref String?
  paid_at              DateTime?       @db.Timestamptz(6)
  meta                 Json?
  created_at           DateTime        @default(now()) @db.Timestamptz(6)
  updated_at           DateTime        @default(now()) @db.Timestamptz(6)
  invoice              invoice         @relation(fields: [invoice_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pay_invoice")
  payment_method       payment_method? @relation(fields: [payment_method_id], references: [id], onUpdate: NoAction, map: "fk_pay_method")

  @@index([invoice_id, status], map: "idx_payment_invoice")
}

model payment_method {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  billing_account_id String              @db.Uuid
  type               payment_method_type
  provider           String?
  provider_ref       String?
  brand              String?
  last4              String?
  exp_month          Int?
  exp_year           Int?
  is_default         Boolean             @default(false)
  active             Boolean             @default(true)
  meta               Json?
  created_at         DateTime            @default(now()) @db.Timestamptz(6)
  updated_at         DateTime            @default(now()) @db.Timestamptz(6)
  payment            payment[]
  billing_account    billing_account     @relation(fields: [billing_account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pm_ba")

  @@index([billing_account_id], map: "idx_payment_method_ba")
  @@index([billing_account_id, is_default], map: "idx_payment_method_default")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model price {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_id             String                   @db.Uuid
  billing_period         billing_period           @default(MONTH)
  amount_cents           BigInt
  currency               String                   @default("EUR") @db.Char(3)
  is_active              Boolean                  @default(true)
  started_at             DateTime                 @default(now()) @db.Timestamptz(6)
  ended_at               DateTime?                @db.Timestamptz(6)
  is_metered             Boolean                  @default(false)
  usage_unit             String?
  meta                   Json?
  created_at             DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at             DateTime                 @default(now()) @db.Timestamptz(6)
  discount_applicability discount_applicability[]
  invoice_item           invoice_item[]
  product                product                  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_price_product")
  subscription_item      subscription_item[]

  @@index([billing_period], map: "idx_price_period")
  @@index([product_id, is_active], map: "idx_price_product_active")
  @@index([product_id, started_at, ended_at], map: "idx_price_window")
}

model product {
  id                                                                   String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sku                                                                  String?                  @unique
  name                                                                 String
  slug                                                                 String?                  @unique
  description                                                          String?
  type                                                                 product_type             @default(STANDALONE)
  visibility                                                           product_visibility       @default(PUBLIC)
  active                                                               Boolean                  @default(true)
  visible                                                              Boolean                  @default(true)
  launch_at                                                            DateTime?                @db.Timestamptz(6)
  trial_days                                                           Int                      @default(0)
  meta                                                                 Json?
  created_at                                                           DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at                                                           DateTime                 @default(now()) @db.Timestamptz(6)
  discount_applicability                                               discount_applicability[]
  entitlement                                                          entitlement[]
  invoice_item                                                         invoice_item[]
  price                                                                price[]
  product_attribute                                                    product_attribute[]
  product_bundle_product_bundle_child_product_idToproduct              product_bundle[]         @relation("product_bundle_child_product_idToproduct")
  product_bundle_product_bundle_parent_product_idToproduct             product_bundle[]         @relation("product_bundle_parent_product_idToproduct")
  product_requirement_product_requirement_product_idToproduct          product_requirement[]    @relation("product_requirement_product_idToproduct")
  product_requirement_product_requirement_required_product_idToproduct product_requirement[]    @relation("product_requirement_required_product_idToproduct")
  subscription_item                                                    subscription_item[]

  @@index([active, visible], map: "idx_product_active_visible")
  @@index([launch_at], map: "idx_product_launch")
  @@index([type], map: "idx_product_type")
}

model product_attribute {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_id String   @db.Uuid
  key        String
  value      String?
  meta       Json?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  product    product  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_attr_product")

  @@unique([product_id, key], map: "uq_attr_unique")
  @@index([product_id], map: "idx_attr_product")
}

model product_bundle {
  id                                                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  parent_product_id                                 String   @db.Uuid
  child_product_id                                  String   @db.Uuid
  quantity                                          Int      @default(1)
  created_at                                        DateTime @default(now()) @db.Timestamptz(6)
  product_product_bundle_child_product_idToproduct  product  @relation("product_bundle_child_product_idToproduct", fields: [child_product_id], references: [id], onUpdate: NoAction, map: "fk_bundle_child")
  product_product_bundle_parent_product_idToproduct product  @relation("product_bundle_parent_product_idToproduct", fields: [parent_product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_bundle_parent")

  @@unique([parent_product_id, child_product_id], map: "uq_bundle")
  @@index([parent_product_id], map: "idx_bundle_parent")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model product_requirement {
  id                                                       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_id                                               String   @db.Uuid
  required_product_id                                      String   @db.Uuid
  per_units                                                Int      @default(1)
  required_min_qty                                         Int      @default(0)
  created_at                                               DateTime @default(now()) @db.Timestamptz(6)
  product_product_requirement_product_idToproduct          product  @relation("product_requirement_product_idToproduct", fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_req_prod")
  product_product_requirement_required_product_idToproduct product  @relation("product_requirement_required_product_idToproduct", fields: [required_product_id], references: [id], onUpdate: NoAction, map: "fk_req_rprod")

  @@unique([product_id, required_product_id], map: "uq_req")
  @@index([product_id], map: "idx_req_product")
}

model subscription {
  id                       String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id               String
  billing_account_id       String              @db.Uuid
  status                   subscription_status @default(INCOMPLETE)
  start_at                 DateTime            @default(now()) @db.Timestamptz(6)
  trial_end_at             DateTime?           @db.Timestamptz(6)
  current_period_start     DateTime?           @db.Timestamptz(6)
  current_period_end       DateTime?           @db.Timestamptz(6)
  cancel_at                DateTime?           @db.Timestamptz(6)
  canceled_at              DateTime?           @db.Timestamptz(6)
  paused_at                DateTime?           @db.Timestamptz(6)
  resume_at                DateTime?           @db.Timestamptz(6)
  external_provider        String?
  external_subscription_id String?
  meta                     Json?
  created_at               DateTime            @default(now()) @db.Timestamptz(6)
  updated_at               DateTime            @default(now()) @db.Timestamptz(6)
  billing_account          billing_account     @relation(fields: [billing_account_id], references: [id], onUpdate: NoAction, map: "fk_sub_ba")
  Company                  Company             @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sub_company")
  subscription_item        subscription_item[]

  @@index([company_id, status], map: "idx_sub_company_status")
  @@index([current_period_end], map: "idx_sub_period")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model subscription_item {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subscription_id String         @db.Uuid
  product_id      String         @db.Uuid
  price_id        String         @db.Uuid
  quantity        Int            @default(1)
  meta            Json?
  created_at      DateTime       @default(now()) @db.Timestamptz(6)
  updated_at      DateTime       @default(now()) @db.Timestamptz(6)
  invoice_item    invoice_item[]
  price           price          @relation(fields: [price_id], references: [id], onUpdate: NoAction, map: "fk_sitem_price")
  product         product        @relation(fields: [product_id], references: [id], onUpdate: NoAction, map: "fk_sitem_prod")
  subscription    subscription   @relation(fields: [subscription_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_sitem_sub")

  @@index([product_id], map: "idx_sitem_prod")
  @@index([subscription_id], map: "idx_sitem_sub")
}

model concept {
  id                String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  label             String
  model             String
  centroid          Unsupported("vector")?
  created_at        DateTime               @default(now()) @db.Timestamptz(6)
  updated_at        DateTime               @default(now()) @db.Timestamptz(6)
  topic_id          String?                @db.Uuid
  sentiment         String?
  confidence        Float?                 @db.Real
  relevance         Float?                 @default(1) @db.Real
  assigned_at       DateTime?              @db.Timestamptz(6)
  rating            Int?
  review_created_at DateTime?              @db.Timestamptz(6)
  review_date       DateTime?              @db.Timestamptz(6)
  company_id        String?
  location_id       String?
  topic             topic?                 @relation(fields: [topic_id], references: [id], onUpdate: NoAction)
  review_concept    review_concept[]

  @@index([centroid], map: "idx_concept_centroid")
  @@index([sentiment], map: "idx_concept_sentiment")
  @@index([company_id], map: "idx_concept_company_id")
  @@index([location_id], map: "idx_concept_location_id")
  @@index([rating], map: "idx_concept_rating")
  @@index([review_created_at], map: "idx_concept_review_created_at")
  @@index([review_date], map: "idx_concept_review_date")
}

model review_concept {
  id                String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  review_id         String               @db.Uuid
  concept_id        String               @db.Uuid
  relevance         Float                @default(1)
  assigned_at       DateTime             @default(now()) @db.Timestamptz(6)
  rating            Int?
  review_created_at DateTime?            @db.Timestamptz(6)
  location_id       String?
  company_id        String?
  review_date       DateTime?            @db.Timestamptz(6)
  Company           Company?             @relation(fields: [company_id], references: [id], onUpdate: NoAction, map: "fk_rc_company")
  Location          Location?            @relation(fields: [location_id], references: [id], onUpdate: NoAction, map: "fk_rc_location")
  concept           concept              @relation(fields: [concept_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  review            review_concept_input @relation(fields: [review_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([review_id, concept_id], map: "review_concept_uniq")
  @@index([company_id], map: "idx_rc_company")
  @@index([location_id], map: "idx_rc_location")
  @@index([rating], map: "idx_rc_rating")
  @@index([review_created_at], map: "idx_rc_review_date")
}

model review_embedding {
  review_id  String                @id @db.Uuid
  model      String
  vector     Unsupported("vector")
  created_at DateTime              @default(now()) @db.Timestamptz(6)
  review     review_concept_input  @relation(fields: [review_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([vector], map: "idx_reviewemb_vector")
}

model review_theme {
  review_id    String
  theme_id     String    @db.Uuid
  company_id   String
  location_id  String?
  sentiment    Sentiment
  confidence   Float     @default(0.0) @db.Real
  matched_snip String?
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  Company      Company   @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Location     Location? @relation(fields: [location_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Review       Review    @relation(fields: [review_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  themes       themes    @relation(fields: [theme_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([review_id, theme_id])
  @@index([company_id, location_id], map: "idx_review_theme_company")
  @@index([created_at], map: "idx_review_theme_created")
  @@index([sentiment], map: "idx_review_theme_sentiment")
  @@index([theme_id], map: "idx_review_theme_theme")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model theme_candidate {
  id                    String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id            String?
  location_id           String?
  ngram                 String
  kind                  theme_term_kind        @default(unigram)
  docs_unique           Int                    @default(0)
  freq_pos              Int                    @default(0)
  freq_neg              Int                    @default(0)
  freq_neu              Int                    @default(0)
  examples              Json                   @default("[]")
  suggested_name        String?
  suggested_description String?
  status                theme_candidate_status @default(proposed)
  merged_into_theme_id  String?                @db.Uuid
  first_seen_at         DateTime               @default(now()) @db.Timestamptz(6)
  last_seen_at          DateTime               @default(now()) @db.Timestamptz(6)
  updated_at            DateTime               @default(now()) @db.Timestamptz(6)
  Company               Company?               @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Location              Location?              @relation(fields: [location_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  themes                themes?                @relation(fields: [merged_into_theme_id], references: [id], onUpdate: NoAction)

  @@index([docs_unique], map: "idx_theme_candidate_counts")
  @@index([ngram(ops: raw("gin_trgm_ops"))], map: "idx_theme_candidate_ngram_trgm", type: Gin)
  @@index([company_id, location_id, status], map: "idx_theme_candidate_scope")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model theme_terms {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  theme_id      String          @db.Uuid
  pattern       String
  kind          theme_term_kind @default(unigram)
  weight        Int             @default(1)
  negation      Boolean         @default(false)
  language_code String?         @db.VarChar(8)
  notes         String?
  created_at    DateTime        @default(now()) @db.Timestamptz(6)
  themes        themes          @relation(fields: [theme_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([kind], map: "idx_theme_terms_kind")
  @@index([pattern(ops: raw("gin_trgm_ops"))], map: "idx_theme_terms_pattern_trgm", type: Gin)
  @@index([theme_id], map: "idx_theme_terms_theme")
}

model themes {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_id      String?
  location_id     String?
  name            String
  slug            String?
  description     String?
  active          Boolean           @default(true)
  auto            Boolean           @default(false)
  language_code   String?           @db.VarChar(8)
  color           String?
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  updated_at      DateTime          @default(now()) @db.Timestamptz(6)
  review_theme    review_theme[]
  theme_candidate theme_candidate[]
  theme_terms     theme_terms[]
  Company         Company?          @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Location        Location?         @relation(fields: [location_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([company_id, location_id, slug])
  @@index([name(ops: raw("gin_trgm_ops"))], map: "idx_themes_name_trgm", type: Gin)
  @@index([company_id, location_id, active], map: "idx_themes_scope_active")
}

model topic {
  id            String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  label         String
  description   String?
  model         String?
  centroid      Unsupported("vector")?
  concept_count Int?                   @default(0)
  avg_rating    Float?                 @default(0)
  is_stable     Boolean?               @default(false)
  created_at    DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?              @default(now()) @db.Timestamptz(6)
  concept       concept[]

  @@index([centroid], map: "idx_topic_centroid")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model review_concept_input {
  id                String            @id(map: "review_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  source_id         String?
  author_id         String?
  date              DateTime          @db.Timestamptz(6)
  rating            Int
  text              String
  analyzed_at       DateTime?         @db.Timestamptz(6)
  created_at        DateTime          @default(now()) @db.Timestamptz(6)
  updated_at        DateTime          @default(now()) @db.Timestamptz(6)
  is_conceptualized Boolean?          @default(false)
  company_id        String?
  location_id       String?
  location_category String?
  review_concept    review_concept[]
  Company           Company?          @relation(fields: [company_id], references: [id], onUpdate: NoAction, map: "fk_rci_company")
  Location          Location?         @relation(fields: [location_id], references: [id], onUpdate: NoAction, map: "fk_rci_location")
  review_embedding  review_embedding?

  @@index([location_category], map: "idx_rci_category")
  @@index([company_id], map: "idx_rci_company")
  @@index([location_id], map: "idx_rci_location")
  @@index([analyzed_at], map: "idx_review_analyzed")
  @@index([date], map: "idx_review_date")
}

/// *
/// * =========================
/// * Enums
/// * =========================
enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  LOST
  WON
}

enum LeadSource {
  UNKNOWN
  WEBSITE
  REFERRAL
  GOOGLE
  FACEBOOK
  YELP
  TRIPADVISOR
  OTHER
}

enum LocationType {
  HQ
  BRANCH
  FRANCHISE
}

enum Sentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
  MIXED
}

enum JobType {
  GENERATE_RESPONSE
  PUBLISH_RESPONSE
  SYNC_REVIEWS
  SYNC_LOCATIONS
  RECOMPUTE_KPI
}

enum JobStatus {
  QUEUED
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
}

enum LocationRole {
  MANAGER
  STAFF
  VIEWER
}

enum LocationStatus {
  ACTIVE
  INACTIVE
  DRAFT
  PENDING_VERIFICATION
}

enum Role {
  system_admin
  org_admin
  user
  test
}

enum ReviewProvider {
  GOOGLE
}

enum ResponseStatus {
  PENDING
  APPROVED
  PUBLISHED
  REJECTED
  DISABLED
}

enum ResponseSource {
  AI
  HUMAN
}

enum UserStatusEventType {
  CREATED
  ACTIVATED
  SUSPENDED
  REACTIVATED
  DEACTIVATED
}

enum WebchatRole {
  USER
  BOT
  AGENT
}

enum KnowledgeScope {
  COMPANY
  AGENT
}

enum WebchatSiteStatus {
  ACTIVE
  PAUSED
  DISABLED
}

enum KnowledgeVisibility {
  PUBLIC
  PRIVATE
}

enum AppointmentStatus {
  PENDING
  BOOKED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum TimeOffType {
  VACATION
  SICK
  BLOCK
  OTHER
}

enum AgentChannel {
  VOICE
  CHAT
}

enum AgentStatus {
  ACTIVE
  PAUSED
  DISABLED
}

enum AgentSessionStatus {
  INIT
  LIVE
  ENDED
  ERROR
}

enum AgentTurnRole {
  USER
  AGENT
  SYSTEM
  TOOL
}

enum AgentLogLevel {
  INFO
  WARN
  ERROR
  DEBUG
}

enum AgentEnvironment {
  TEST
  PROD
}

/// Tipos de fase canónicos
enum PhaseType {
  INTRO
  COLLECT
  INTENT
  CUSTOM
}

enum billing_period {
  ONCE
  DAY
  WEEK
  MONTH
  YEAR
}

enum discount_duration {
  ONCE
  REPEATING
  FOREVER
}

enum entitlement_source {
  SUBSCRIPTION
  MANUAL
  TRIAL
  PROMO
}

enum invoice_status {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}

enum payment_method_type {
  CARD
  SEPA_DEBIT
  BANK_TRANSFER
  WALLET
  OTHER
}

enum payment_status {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum product_type {
  STANDALONE
  ADDON
  SEAT
  USAGE
  LOCATION
}

enum product_visibility {
  PUBLIC
  HIDDEN
  INTERNAL
}

enum subscription_status {
  INCOMPLETE
  TRIALING
  ACTIVE
  PAST_DUE
  PAUSED
  CANCELED
}

enum theme_candidate_status {
  proposed
  approved
  rejected
  merged
}

enum theme_term_kind {
  unigram
  bigram
  regex
  phrase
}
