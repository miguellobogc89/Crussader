generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?
  image              String?
  role               Role                 @default(user)
  Account            Account[]
  ExternalConnection ExternalConnection[]
  Session            Session[]
  UserCompany        UserCompany[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ExternalConnection {
  id            String     @id @default(cuid())
  userId        String
  provider      String
  accountEmail  String?
  access_token  String
  refresh_token String?
  expires_at    Int?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  companyId     String?
  User          User       @relation(fields: [userId], references: [id])
  Location      Location[]

  @@unique([userId, provider])
  @@index([companyId])
}

model Company {
  id          String        @id @default(cuid())
  name        String
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  UserCompany UserCompany[]
  Location    Location[]
  Lead        Lead[]

  // Identificación
  cif        String? @db.VarChar(32) // ej: B12345678
  vatNumber  String? @db.VarChar(32) // IVA intracomunitario
  registryId String? @db.VarChar(64) // número de registro mercantil
  matrix     String? @db.VarChar(128) // empresa matriz (ej: Inditex)

  // Branding / Imagen
  logoUrl    String?
  brandColor String? @db.VarChar(16) // hex (#123456)
  tagline    String? @db.VarChar(128) // eslogan

  // Datos corporativos
  employeesBand String? @db.VarChar(32) // ej: "1-5", "101-250"
  activity      String? @db.VarChar(64) // sector principal
  description   String? @db.Text

  // Contacto
  email       String?
  phone       String?
  website     String?
  address     String?
  city        String?
  region      String?
  country     String?
  postalCode  String?
  countryCode String? @db.VarChar(2) // ISO-3166-1 alpha-2

  // Social media
  facebookUrl  String?
  instagramUrl String?
  linkedinUrl  String?
  twitterUrl   String?

  // KPIs globales
  Reviews      Review[] @relation("CompanyReviews")
  reviewsCount Int      @default(0)
  reviewsAvg   Decimal? @db.Decimal(3, 2)

  // Auditoría
  lastSyncAt DateTime?

  @@index([name])
  @@index([activity])
  @@index([matrix])
}

model UserCompany {
  id        String      @id @default(cuid())
  userId    String
  companyId String
  role      CompanyRole @default(MEMBER)
  createdAt DateTime    @default(now())
  User      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([companyId])
}

model Lead {
  id        String     @id @default(cuid())
  companyId String
  ownerId   String?
  name      String
  email     String?
  phone     String?
  source    LeadSource @default(UNKNOWN)
  status    LeadStatus @default(NEW)
  notes     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  company   Company    @relation(fields: [companyId], references: [id])

  @@index([companyId])
  @@index([ownerId])
  @@index([status])
}

model Location {
  id        String          @id @default(cuid())
  companyId String
  // Identificación y clasificación
  title     String
  type      LocationType? // HQ, BRANCH, FRANCHISE
  status    LocationStatus? @default(DRAFT)
  slug      String?         @unique

  // Dirección
  address     String?
  address2    String?
  city        String?
  region      String?
  country     String?
  postalCode  String?
  countryCode String? @db.VarChar(2) // ISO-3166-1 alpha-2 (ej: ES)

  // Contacto / online
  phone        String?
  email        String?
  website      String?
  timezone     String? // Ej: Europe/Madrid
  facebookUrl  String?
  instagramUrl String?

  // Geolocalización
  latitude  Decimal? @db.Decimal(10, 7)
  longitude Decimal? @db.Decimal(10, 7)

  // Google Business / Maps
  googleName           String?
  googlePlaceId        String?             @unique
  googleLocationId     String? // ID interno de GMB/Business Profile
  googleAccountId      String?
  externalConnectionId String?
  ExternalConnection   ExternalConnection? @relation(fields: [externalConnectionId], references: [id], onDelete: SetNull)

  // Horarios y medios
  openingHours     Json?
  featuredImageUrl String?

  // KPIs de reseñas
  Reviews      Review[] @relation("LocationReviews")
  reviewsCount Int      @default(0)
  reviewsAvg   Decimal? @db.Decimal(3, 2) // 0.00–5.00

  // Auditoría
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  lastSyncAt DateTime?

  // Relaciones
  company Company @relation(fields: [companyId], references: [id])
  // Si tienes relación inversa en Company, ya la tienes como Company.Location

  @@index([companyId])
  @@index([googleAccountId])
  @@index([status])
}

enum CompanyRole {
  OWNER
  ADMIN
  MEMBER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  LOST
  WON
}

enum LeadSource {
  UNKNOWN
  WEBSITE
  REFERRAL
  GOOGLE
  FACEBOOK
  YELP
  TRIPADVISOR
  OTHER
}

enum LocationType {
  HQ
  BRANCH
  FRANCHISE
}

enum LocationStatus {
  ACTIVE
  INACTIVE
  DRAFT
  PENDING_VERIFICATION
}

// prisma/schema.prisma
enum Role {
  system_admin
  org_admin
  user
}

enum ReviewProvider {
  GOOGLE
  // FUTURO: FACEBOOK, YELP, TRIPADVISOR, OTHER
}

model Review {
  id         String         @id @default(cuid())
  companyId  String
  locationId String
  provider   ReviewProvider
  externalId String // p.ej. "locations/xxx/reviews/yyy"

  // Datos del autor
  reviewerName  String?
  reviewerPhoto String?
  reviewerAnon  Boolean?

  // Contenido y rating
  rating       Int // 1..5
  comment      String?
  languageCode String? @db.VarChar(8)

  // Timestamps de Google
  createdAtG DateTime?
  updatedAtG DateTime?

  // Respuesta del negocio
  replyComment    String?
  replyUpdatedAtG DateTime?

  // Auditoría local
  ingestedAt DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  // Relaciones (nombradas)
  Company  Company  @relation("CompanyReviews", fields: [companyId], references: [id], onDelete: Cascade)
  Location Location @relation("LocationReviews", fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([provider, externalId])
  @@index([companyId])
  @@index([locationId])
  @@index([rating])
  @@index([createdAtG])
}
